// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  ADMIN
  ACCOUNT
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  avatar    String?
  role      Role       @default(ACCOUNT)
  name      String
  posts     Post[]
  comments  Comment[]
  favorites Favorite[]
  likes     Like[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Post {
  id               Int            @id @default(autoincrement())
  title            String
  content          String?
  published        Boolean        @default(false)
  authorId         Int
  author           User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments         Comment[]
  categoryId       Int
  category         Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  favorites        PostFavorite[]
  likes            Like[]
  tags             String[]       @default([])
  coverUrl         String
  coverWidth       Int
  coverHeight      Int
  coverAspectRatio Float
  coverThumbnail   String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id        Int            @id @default(autoincrement())
  name      String
  userId    Int
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts     PostFavorite[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model PostFavorite {
  postId     Int
  favoriteId Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  favorite   Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade)

  @@id([postId, favoriteId])
}

model Like {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}
