// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  nickname    String       @db.VarChar(255)
  avatar      String       @db.VarChar(255)
  role        Role
  articles    Article[]
  collections Collection[]
  likes       Like[]
}

model Article {
  id          Int                 @id @default(autoincrement())
  title       String              @db.VarChar(255)
  content     String
  published   Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  authorId    Int?
  author      User?               @relation(fields: [authorId], references: [id], onDelete: SetNull)
  coverUrl    String              @db.VarChar(255)
  coverWidth  Int
  coverHeight Int
  aspectRatio Decimal
  collections CollectionArticle[]
  likes       Like[]
  tags        ArticleTag[]
}

model Collection {
  id       Int                 @id @default(autoincrement())
  name     String              @db.VarChar(255)
  userId   Int?
  user     User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  articles CollectionArticle[]
}

model CollectionArticle {
  collectionId Int
  articleId    Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  article      Article    @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@id([collectionId, articleId])
}

model Tag {
  id       Int          @id @default(autoincrement())
  name     String       @unique @db.VarChar(255)
  articles ArticleTag[]
}

model ArticleTag {
  articleId Int
  tagId     Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
}

model Like {
  id        Int     @id @default(autoincrement())
  userId    Int
  articleId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}

enum Role {
  ADMIN
  ACCOUNT
}
